# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from com.strucks.coronastats.models.base_model_ import Model
from com.strucks.coronastats import util


class OverviewDataRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cases=None, incidence=None, active=None, dead=None, cured=None):  # noqa: E501
        """OverviewDataRow - a model defined in OpenAPI

        :param cases: The cases of this OverviewDataRow.  # noqa: E501
        :type cases: int
        :param incidence: The incidence of this OverviewDataRow.  # noqa: E501
        :type incidence: int
        :param active: The active of this OverviewDataRow.  # noqa: E501
        :type active: int
        :param dead: The dead of this OverviewDataRow.  # noqa: E501
        :type dead: int
        :param cured: The cured of this OverviewDataRow.  # noqa: E501
        :type cured: int
        """
        self.openapi_types = {
            'cases': int,
            'incidence': int,
            'active': int,
            'dead': int,
            'cured': int
        }

        self.attribute_map = {
            'cases': 'cases',
            'incidence': 'incidence',
            'active': 'active',
            'dead': 'dead',
            'cured': 'cured'
        }

        self._cases = cases
        self._incidence = incidence
        self._active = active
        self._dead = dead
        self._cured = cured

    @classmethod
    def from_dict(cls, dikt) -> 'OverviewDataRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OverviewDataRow of this OverviewDataRow.  # noqa: E501
        :rtype: OverviewDataRow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cases(self):
        """Gets the cases of this OverviewDataRow.


        :return: The cases of this OverviewDataRow.
        :rtype: int
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this OverviewDataRow.


        :param cases: The cases of this OverviewDataRow.
        :type cases: int
        """

        self._cases = cases

    @property
    def incidence(self):
        """Gets the incidence of this OverviewDataRow.


        :return: The incidence of this OverviewDataRow.
        :rtype: int
        """
        return self._incidence

    @incidence.setter
    def incidence(self, incidence):
        """Sets the incidence of this OverviewDataRow.


        :param incidence: The incidence of this OverviewDataRow.
        :type incidence: int
        """

        self._incidence = incidence

    @property
    def active(self):
        """Gets the active of this OverviewDataRow.


        :return: The active of this OverviewDataRow.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OverviewDataRow.


        :param active: The active of this OverviewDataRow.
        :type active: int
        """

        self._active = active

    @property
    def dead(self):
        """Gets the dead of this OverviewDataRow.


        :return: The dead of this OverviewDataRow.
        :rtype: int
        """
        return self._dead

    @dead.setter
    def dead(self, dead):
        """Sets the dead of this OverviewDataRow.


        :param dead: The dead of this OverviewDataRow.
        :type dead: int
        """

        self._dead = dead

    @property
    def cured(self):
        """Gets the cured of this OverviewDataRow.


        :return: The cured of this OverviewDataRow.
        :rtype: int
        """
        return self._cured

    @cured.setter
    def cured(self, cured):
        """Sets the cured of this OverviewDataRow.


        :param cured: The cured of this OverviewDataRow.
        :type cured: int
        """

        self._cured = cured
